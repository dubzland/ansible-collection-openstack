#jinja2: trim_blocks:True,lstrip_blocks:True
{{ ansible_managed | comment }}
{% set _type_drivers = ((openstack_neutron_provider_networks | map(attribute='type')) + openstack_neutron_tenant_network_types) | unique  %}
[ml2]
type_drivers = {{ _type_drivers | join(',') }}
tenant_network_types = {{ openstack_neutron_tenant_network_types | join(',') }}
mechanism_drivers = ovn
extension_drivers = port_security,subnet_dns_publish_fixed_ip
overlay_ip_version = 4

{% if 'flat' in _type_drivers %}
[ml2_type_flat]
network_vlan_ranges = {{ openstack_neutron_provider_networks | selectattr('type', 'equalto', 'flat') | map(attribute='name') | join(',') }}

{% endif %}
{%- if 'vlan' in _type_drivers -%}
{%-   set vlan_networks = [] -%}
{%-   for network in openstack_neutron_provider_networks -%}
{%-     if network['type'] == 'vlan' -%}
{{-       vlan_networks.append("%s:%s" % (network['name'], network['range'])) -}}
{%-     endif -%}
{%-   endfor -%}
[ml2_type_vlan]
network_vlan_ranges = {{ vlan_networks | join(',') }}

{% endif %}
{% if 'geneve' in _type_drivers %}
[ml2_type_geneve]
vni_ranges = {{ openstack_neutron_geneve_network_ranges | join(',') }}
max_header_size = 38

{% endif %}
[ovn]
ovn_nb_connection = tcp:{{ _controller_ip }}:6641
ovn_sb_connection = tcp:{{ _controller_ip }}:6642
ovn_l3_scheduler = leastloaded
ovn_metadata_enabled = True

[securitygroup]
enable_security_group = True
firewall_driver = neutron.agent.linux.iptables_firewall.OVSHybridIptablesFirewallDriver
